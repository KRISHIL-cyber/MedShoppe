//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebClient.StoreServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Medicine", Namespace="http://schemas.datacontract.org/2004/07/StoreManagement.StoreManager")]
    [System.SerializableAttribute()]
    public partial class Medicine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MedicineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BrandName {
            get {
                return this.BrandNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandNameField, value) != true)) {
                    this.BrandNameField = value;
                    this.RaisePropertyChanged("BrandName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpDate {
            get {
                return this.ExpDateField;
            }
            set {
                if ((this.ExpDateField.Equals(value) != true)) {
                    this.ExpDateField = value;
                    this.RaisePropertyChanged("ExpDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MedicineName {
            get {
                return this.MedicineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MedicineNameField, value) != true)) {
                    this.MedicineNameField = value;
                    this.RaisePropertyChanged("MedicineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StoreServiceReference.IStore")]
    public interface IStore {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStore/Add", ReplyAction="http://tempuri.org/IStore/AddResponse")]
        bool Add(WebClient.StoreServiceReference.Medicine m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStore/Add", ReplyAction="http://tempuri.org/IStore/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(WebClient.StoreServiceReference.Medicine m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStore/Delete", ReplyAction="http://tempuri.org/IStore/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStore/Delete", ReplyAction="http://tempuri.org/IStore/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStore/Update", ReplyAction="http://tempuri.org/IStore/UpdateResponse")]
        bool Update(WebClient.StoreServiceReference.Medicine m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStore/Update", ReplyAction="http://tempuri.org/IStore/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(WebClient.StoreServiceReference.Medicine m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStore/Display", ReplyAction="http://tempuri.org/IStore/DisplayResponse")]
        System.Data.DataSet Display();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStore/Display", ReplyAction="http://tempuri.org/IStore/DisplayResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> DisplayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStore/GetById", ReplyAction="http://tempuri.org/IStore/GetByIdResponse")]
        System.Data.DataSet GetById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStore/GetById", ReplyAction="http://tempuri.org/IStore/GetByIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStoreChannel : WebClient.StoreServiceReference.IStore, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StoreClient : System.ServiceModel.ClientBase<WebClient.StoreServiceReference.IStore>, WebClient.StoreServiceReference.IStore {
        
        public StoreClient() {
        }
        
        public StoreClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StoreClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StoreClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Add(WebClient.StoreServiceReference.Medicine m) {
            return base.Channel.Add(m);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(WebClient.StoreServiceReference.Medicine m) {
            return base.Channel.AddAsync(m);
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public bool Update(WebClient.StoreServiceReference.Medicine m) {
            return base.Channel.Update(m);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(WebClient.StoreServiceReference.Medicine m) {
            return base.Channel.UpdateAsync(m);
        }
        
        public System.Data.DataSet Display() {
            return base.Channel.Display();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> DisplayAsync() {
            return base.Channel.DisplayAsync();
        }
        
        public System.Data.DataSet GetById(int id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetByIdAsync(int id) {
            return base.Channel.GetByIdAsync(id);
        }
    }
}
